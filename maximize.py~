# maximize.py
# Autor Carlos M. Silva

import numpy as np
from scipy.optimize import minimize

# Constantes del problema
F     = 96.0
ALPHA = 240.0
BETA  = 1.87
ETA   = (F-2*ALPHA)/BETA

def ta(tb):
    return ETA - tb

def objective(vec):
    kab = vec[0]
    #ta = vec[1]
    tb = vec[1]
    # La función objetivo es la opuesta de la que queremos maximizar
    print(kab, tb, ta(tb))
    return -kab*(1/tb - 1/ta(tb))
   
    
"""
def constraint(vec):
    ta = vec[1]
    tb = vec[2]
    return ta + tb - ETA

def constraint2(vec):
    kab = vec[0]
    ta = vec[1]
    tb = vec[2]
    return -(ALPHA+BETA*ta)+kab*(ta-tb)
"""

# Semilla
vec0 = np.array([1., 200.])

# Límites
# b_temp = (-70.0, 100)
# b_kab  = (1e-5, 1e5)
# limites = (b_kab, b_temp, b_temp)

# constraints
# con1 = {'type': 'eq', 'fun': constraint}
# con2 = {'type': 'eq', 'fun': constraint2}
# cons = ([con1, con2])

# Optimización
solucion =  minimize(objective,vec0,method='nelder-mead', options={'maxiter': 1200, 'xatol': 0.0001, 'return_all': True, 'disp': True})

vec = solucion.x

print(objective(vec))
print("kab = ", vec[0])
print("Tb = ", vec[1])
print("Ta = ", ta(vec[1]))

#print(solucion)
