"""temperaturas_tierra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Cmv7pulDu0u3B26I7vI7vNPcQNE5OhX

En este notebook calculamos la temperatura promedio de diferentes zonas de la Tierra a partir de los datos de NCEP Reanalysis
"""


import xarray as xr
import matplotlib.pyplot as plt
import numpy as np


Tsdata_ncep = xr.open_dataset('data/skt.sfc.mon.ltm.1991-2020.nc')
# ncep_Ts = Tsdata_ncep.mean(dim='time')
ncep_Ts = Tsdata_ncep
lat_ncep = ncep_Ts.lat; lon_ncep = ncep_Ts.lon
print(ncep_Ts)

"""Ahora haremos una función que seleccione los datos que se ingresan en un array, filtrando entre dos latitudes $\lambda_1$ y $\lambda_2$."""

def mascara(datos, lambda1, lambda2):
  lat=datos.lat
  target = datos.where((lat >= lambda1) & (lat <= lambda2))
  datos_filtrados = target.dropna(dim='lat')
  return datos_filtrados

def mascara_excl(datos, lambda1, lambda2):
  # Excluye datos que están entre lambda1 y lambda2
  lat=datos.lat
  target = datos.where((lat <= lambda1) | (lat >= lambda2))
  datos_filtrados = target.dropna(dim='lat')
  return datos_filtrados

# Divisiones zonas
lambda1 = -30
lambda2 = +30

zona_sur = mascara(ncep_Ts, -90, lambda1)
zona_norte = mascara(ncep_Ts, lambda2, +90)

zona_polar = mascara_excl(ncep_Ts, lambda1, lambda2)
zona_ecuat = mascara(ncep_Ts, lambda1, lambda2)

# Histogramas
hist_ecuat = xr.plot.hist(zona_ecuat.skt,bins=100,alpha=0.8)
plt.suptitle("Histograma zona ecuatorial")
plt.grid()
plt.show()
hist_sur = xr.plot.hist(zona_sur.skt,bins=100)
plt.suptitle("Histograma casquete sur")
plt.show()
hist_norte = xr.plot.hist(zona_norte.skt,bins=100,alpha=0.6)
plt.suptitle("Histograma casquete norte")
plt.show()
hist_polos = xr.plot.hist(zona_polar.skt,bins=100)
plt.suptitle("Histograma zonas polares")
plt.grid()
plt.show()


promedio_ecuatorial = zona_ecuat.skt.mean().values+273.15
print("Prom. ecuatorial: ", promedio_ecuatorial, "K")
desveste = zona_ecuat.skt.std().values
print("Intervalo [K]:", (promedio_ecuatorial-desveste, promedio_ecuatorial+desveste))

promedio_polar = zona_polar.skt.mean().values+273.15
print("Prom. polar: ", promedio_polar, "K")
desvestp = zona_polar.skt.std().values
print("Intervalo [K]:", (promedio_polar-desvestp, promedio_polar+desvestp))

"""
¡OJO!
Hasta acá no hicimos ningún pesaje por el área de cada celda.
"""

# Tomamos el promedio anual
Ts_ncep_anual = ncep_Ts.skt.mean(dim=('time'))
# Ts_ncep_anual = ncep_Ts

def area_grid(lat, lon):
    """
    Calculate the area of each grid cell
    Area is in square meters

    Input
    -----------
    lat: vector of latitude in degrees
    lon: vector of longitude in degrees

    Output
    -----------
    area: grid-cell area in square-meters with dimensions, [lat,lon]

    Notes
    -----------
    Based on the function in
    https://github.com/chadagreene/CDT/blob/master/cdt/cdtarea.m
    """
    from numpy import meshgrid, deg2rad, gradient, cos
    from xarray import DataArray

    xlon, ylat = meshgrid(lon, lat)
    R = earth_radius(ylat)

    dlat = deg2rad(gradient(ylat, axis=0))
    dlon = deg2rad(gradient(xlon, axis=1))

    dy = dlat * R
    dx = dlon * R * cos(deg2rad(ylat))

    area = dy * dx

    xda = DataArray(
        area,
        dims=["lat", "lon"],
        coords={"lat": lat, "lon": lon},
        attrs={
            "long_name": "area_per_pixel",
            "description": "area per pixel",
            "units": "m^2",
        },
    )
    return xda

def earth_radius(lat):
    '''
    calculate radius of Earth assuming oblate spheroid
    defined by WGS84

    Input
    ---------
    lat: vector or latitudes in degrees

    Output
    ----------
    r: vector of radius in meters

    Notes
    -----------
    WGS84: https://earth-info.nga.mil/GandG/publications/tr8350.2/tr8350.2-a/Chapter%203.pdf
    '''
    from numpy import deg2rad, sin, cos

    # define oblate spheroid from WGS84
    a = 6378137
    b = 6356752.3142
    e2 = 1 - (b**2/a**2)

    # convert from geodecic to geocentric
    # see equation 3-110 in WGS84
    lat = deg2rad(lat)
    lat_gc = np.arctan( (1-e2)*np.tan(lat) )

    # radius equation
    # see equation 3-107 in WGS84
    r = (
        (a * (1 - e2)**0.5)
         / (1 - (e2 * np.cos(lat_gc)**2))**0.5
        )

    return r

"""Ahora otra función que tome los datos filtrados y calcule el promedio"""

def promedio_zonal(temperaturas):
  # Cálculo del área de cada celda
  da_area = area_grid(temperaturas['lat'], temperaturas['lon'])
  # Área total
  total_area = da_area.sum(['lat','lon'])
  # temperaturas pesadas por el área de cada celda
  temp_weighted = (temperaturas*da_area)/total_area
  # Promedio final
  return temp_weighted.sum(['lat','lon'])


def analisis_zonal(zona):
  resultado = promedio_zonal(zona).skt.values
  print("T promedio →", resultado+273.15, "K")
  print('Tmin = ', zona.skt.min().values+273.15, 'K')
  print('Tmax = ', zona.skt.max().values+273.15, 'K')
  return

print("\n\nZona ecuatorial")
analisis_zonal(zona_ecuat.mean(dim='time'))
print("\n\nZonas polares")
analisis_zonal(zona_polar.mean(dim='time'))


"""
lambda1_polosur = -90
lambda2_polosur = -30

lambda1_polonorte = 30
lambda2_polonorte = 90

zona2 = mascara(Ts_ncep_anual, lambda1_polosur, lambda2_polosur)
zona3 = mascara(Ts_ncep_anual, lambda1_polonorte, lambda2_polonorte)
print(promedio_zonal(zona2))
print(promedio_zonal(zona3))
resultado = 0.5*(promedio_zonal(zona2) + promedio_zonal(zona3))
print("Zonas polares →", resultado.values)
"""

"""# Estimaciones de SWA y SWB"""

# Importamos los datos de radiación incidente y reflejada en TOA

#ncep_ulwrf = xr.open_dataset(url + "other_gauss/ulwrf")  # Infrarrojo saliente
#ncep_dswrf = xr.open_dataset(url + "other_gauss/dswrf")  # UV incidente
#ncep_uswrf = xr.open_dataset(url + "other_gauss/uswrf")  # UV reflejado
#LWR_anual = ncep_ulwrf.ulwrf.mean(dim=('time'))
#SWR_anual = (ncep_dswrf.dswrf - ncep_uswrf.uswrf).mean(dim=('time'))

ceresmapa = xr.open_dataset("data/CERES_EBAF-TOA_Ed4.2_Subset_200003-202310-global.nc")

latitudes = ceresmapa.lat
outsw = ceresmapa.toa_sw_all_mon.mean(dim='time')
incoming = ceresmapa.solar_mon.mean(dim='time')
resta = incoming-outsw
SWR_anual = resta

"""
----------------------------
VALORES DE SW PARA DOS CAJAS
----------------------------
"""

SWA_data = mascara(SWR_anual, -30, 30)

casquete_sur = mascara(SWR_anual, -90, -30)
casquete_norte = mascara(SWR_anual, 30, 90)

SWa = promedio_zonal(SWA_data)
SWb = 0.5*(promedio_zonal(casquete_sur) + promedio_zonal(casquete_norte))
# SWsur = promedio_zonal(casquete_sur)
# SWnorte = promedio_zonal(casquete_norte)
print("\n VALORES SW DOS CAJAS")
print("-----------------------------")
print("SWA = ", SWa.values, "W/m²")
print("SWB = ", SWb.values, "W/m²")
# print("SW Sur = ", SWsur.values, "W/m²")
# print("SW Norte = ", SWnorte.values, "W/m²")

"""
-----------------------------
VALORES DE SW PARA TRES CAJAS
-----------------------------
"""

SWA_data = mascara(SWR_anual, -19.47, 19.47)

casquete_sur = mascara(SWR_anual, -90, -19.47)
casquete_norte = mascara(SWR_anual, 19.47, 90)

SWa = promedio_zonal(SWA_data)
# SWb = 0.5*(promedio_zonal(casquete_sur) + promedio_zonal(casquete_norte))
SWsur = promedio_zonal(casquete_sur)
SWnorte = promedio_zonal(casquete_norte)
print("\n VALORES SW TRES CAJAS")
print("-----------------------------")
print("SWA = ", SWa.values, "W/m²")
# print("SWB = ", SWb.values, "W/m²")
print("SW Sur = ", SWsur.values, "W/m²")
print("SW Norte = ", SWnorte.values, "W/m²")
